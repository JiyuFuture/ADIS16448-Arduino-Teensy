%%
%  December 2017
%  Author: Juan Jose Chong <juan.chong@analog.com>
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  crc16adis_table.m
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   This function calculates a CRC16 check using a look-up table on data 
%   generated from an ADIS16448 IMU when using burst mode (MSC_CTRL[4] = 1). 
%   This implementation is a variant of the CCITT X.25 spec. 
%
%   Many thanks to the EngineerZone user markos for his table!
%   https://ez.analog.com/docs/DOC-12533
%
%   Permission is hereby granted, free of charge, to any person obtaining
%   a copy of this software and associated documentation files (the
%   "Software"), to deal in the Software without restriction, including
%   without limitation the rights to use, copy, modify, merge, publish,
%   distribute, sublicense, and/or sell copies of the Software, and to
%   permit persons to whom the Software is furnished to do so, subject to
%   the following conditions:
% 
%   The above copyright notice and this permission notice shall be
%   included in all copies or substantial portions of the Software.
% 
%   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
%   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
%   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
%   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
%   LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
%   OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
%   WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%

function crc = crc16adis_table(data)

adiscrc = uint16([...
0,6094,4063,6161,8126,2160,4193,1967,...
7999,2289,4320,1838,129,5967,3934,6288,...
7741,2547,4578,1580,387,5709,3676,6546,...
258,5836,3805,6419,7868,2418,4451,1709,...
7225,3063,5094,1064,903,5193,3160,7062,...
774,5320,3289,6935,7352,2934,4967,1193,...
516,5578,3547,6677,7610,2676,4709,1451,...
7483,2805,4836,1322,645,5451,3418,6804,...
6193,4095,6126,32,1935,4161,2128,8094,...
1806,4288,2257,7967,6320,3966,5999,161,...
1548,4546,2515,7709,6578,3708,5741,419,...
6451,3837,5868,290,1677,4419,2386,7836,...
1032,5062,3031,7193,7094,3192,5225,935,...
6967,3321,5352,806,1161,4935,2902,7320,...
6709,3579,5610,548,1419,4677,2644,7578,...
1290,4804,2773,7451,6836,3450,5483,677,...
4129,2031,8190,2096,3999,6225,64,6030,...
3870,6352,193,5903,4256,1902,8063,2225,...
3612,6610,451,5645,4514,1644,7805,2483,...
4387,1773,7932,2354,3741,6483,322,5772,...
3096,7126,967,5129,5030,1128,7289,2999,...
4903,1257,7416,2870,3225,6999,838,5256,...
4645,1515,7674,2612,3483,6741,580,5514,...
3354,6868,709,5387,4772,1386,7547,2741,...
2064,8158,1999,4097,6062,96,6257,4031,...
5935,225,6384,3902,2193,8031,1870,4224,...
5677,483,6642,3644,2451,7773,1612,4482,...
2322,7900,1741,4355,5804,354,6515,3773,...
5161,999,7158,3128,2967,7257,1096,4998,...
2838,7384,1225,4871,5288,870,7031,3257,...
2580,7642,1483,4613,5546,612,6773,3515,...
5419,741,6900,3386,2709,7515,1354,4740
]);

%Example Data (LSB-first) - Result should be 0x9AF4 (39668):
%data = [15 0 248 255 10 0 65 254 204 255 86 4 39 2 163 253 18 244 60 193 108 255];

crc = uint16(65535); %0xFFFF

for n = 1:length(data)
    dat = uint16(data(n));    
    index = adiscrc((bitxor(dat,bitand(crc,255)))+1);
    crc = bitxor(bitsrl(crc,8),index);
end

crc = bitcmp(crc);
crc = bitor((bitsll(crc,8)),(bitsrl(crc,8)),'uint16');
%crc=dec2hex(crc)


